# Foundry VTT System Development Rules

## 0) Canonical identifiers
System ID = Folder Name = World Reference.
- Folder: Data/systems/anarchy/
- system.json: "id": "anarchy"
- world.json: "system": "anarchy"
- Do not rename the folder to version suffixes. Use Git tags/branches for versions.

## 1) Manifest contract (system.json)
- esmodules and styles must point to built files only (bundled JS/CSS under dist/), never src/*, never http://localhost:*.
- Bump "version" on every release/build that changes assets to invalidate cache.
- Declare languages, packs, and relationship/compatibility accurately.
- Disallow optional dev keys in the manifest; production manifest must be self-contained.

## 2) Source vs. Build vs. Package
- Source lives in: /src, /templates, /lang, /assets (or /icons), /packs/_source.
- Build emits to: /dist (JS/CSS) and leaves assets/templates/lang in place.
- Package contents (what Foundry actually runs): system.json, /dist, /templates, /lang, /assets|/icons, /packs (compiled DBs).
- Never require a Vite/webpack dev server to run the package.

## 3) Vite/Build settings (authoritative)
- build.outDir = "dist"
- base = "" (or /) — no absolute dev URLs.
- No dev-only plugins in production build.
- Dev code must be behind guards: `if (import.meta.env.DEV) { /* dev-only helpers */ }`
- Provide npm scripts:
  - build: produce production bundle to dist/
  - dev: run Vite dev server (for hacking only)
  - lint, typecheck, test (if present)

## 4) Asset path rule
- Always reference assets with absolute system paths in CSS/HBS/TS: `/systems/anarchy/assets/...` or `/systems/anarchy/icons/...`
- Do not use relative paths like ../img/... in templates/CSS (renderer working dirs vary).
- Keep logo at a stable path (e.g., `/systems/anarchy/assets/branding/anarchy-logo.webp`).

## 5) Sheets & Hooks loading
- One top-level entry module (e.g., src/index.ts) registers all:
  - Hooks.once("init" | "setup" | "ready") wiring
  - Document classes, sheets, settings, handlebars helpers
- Do not import sheets dynamically from dev-server URLs; they must be bundled.

## 6) Packs & Data
- Author content as JSON in /packs/_source (optional), compile to .db in /packs.
- Never ship _source only; ensure .db exists for releases.
- Keep compendia small and domain-scoped (Actors/Items/Rules separated).

## 7) Environments
- Development: Vite dev server allowed; production: forbidden.
- No localhost:* may appear in system.json, templates, dist, or runtime logs.
- Provide a .env.example for dev-only variables; production has no env requirements.

## 8) Error budget & diagnostics
- On boot, log a single line with system name, version, and Foundry compatibility.
- Any uncaught error in init/setup/ready is a build breaker. Fix before commit.
- CI must fail on:
  - localhost: occurrences
  - src/ references in system.json
  - Missing /dist/* files referenced by manifest
  - 404s in a headless smoke load (see §12)

## 9) Versioning & releases
- Use SemVer (MAJOR.MINOR.PATCH).
- Tag releases; create a system.zip artifact containing only package contents (§2).
- Update system.json.version and (optionally) a CHANGELOG.md.
- If you expose a manifest URL, it must point to the release zip, not the repo tree.

## 10) Repo hygiene
- Keep README.md with: install (manual + manifest), dev setup, build, release, troubleshooting.
- .gitignore excludes dist/ only if you generate it in CI; otherwise commit dist/ for self-hosting.
- No large binaries in repo except minimal logos/icons.

## 11) World safety & migration
- If schema changes, add a migration step on ready that:
  - checks stored system version,
  - runs idempotent transforms,
  - updates stored version.
- Never silently mutate user data without version gating.

## 12) Smoke tests (fast, automated)
- Script: npm run smoke does:
  - Verify manifest/folder/id alignment.
  - Verify dist/* exists and paths in system.json are valid.
  - Grep for forbidden patterns: localhost:, http://127.0.0.1, src/ in manifest.
  - Optional: start Foundry headless, request /systems/anarchy/... assets, assert no 404.

## 13) Performance & UX
- Bundle split only if necessary; one dist/index.js is ideal.
- Debounce high-frequency hooks; avoid heavy work in render* without caching.
- Minify in prod; generate source maps for debugging (don't ship maps if you care about size/IP).

## 14) Styling
- Namespaced root class on app windows (e.g., .anarchy-app) to prevent CSS collision.
- Avoid global tag selectors; prefer BEM or explicit classes.
- Token and sheet art aspect ratios documented; provide placeholders.

## 15) Logging & supportability
- console.log allowed in dev; in prod use a small logger that can be silenced via a setting.
- Red-box errors: show a helpful dialog with a link to troubleshooting in README.

## 16) Troubleshooting checklist (must-do before filing a bug)
- Clear cache (Ctrl+F5) and restart Foundry.
- Confirm Data/systems/anarchy/system.json → "esmodules":["dist/index.js"].
- Confirm no console 404s under /systems/anarchy/*.
- Confirm no requests to any port except Foundry's (e.g., 30000).
- Disable third-party modules (safe mode) and retest.
- Rebuild: npm ci && npm run build; re-open world.

## Cursor/Agent enforcement snippets

### Forbidden patterns (CI step)
Fail build if any file contains:
- localhost:
- http://127.0.0.1
- "esmodules": ["src/ or "styles": ["src/
- "/anarchy.v" in folder or manifest id

### Manifest validator (pseudo)
- Read system.json
- Assert id === dirname
- For each esmodules[] and styles[] path, assert file exists
- Assert version is SemVer and differs from previous tag on release
